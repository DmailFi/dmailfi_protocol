type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type InboxData = record {
  content : opt vec nat8;
  mail_id : text;
  read : bool;
  header : MailHeader;
};
type LedgerInfo = record { name : text; description : text };
type Mail = record { body : vec nat8; header : MailHeader };
type MailError = variant {
  HttpSendMail : text;
  PermissionedSystem;
  NoUserAddressFound;
  MailTransferError : text;
  AddressExist;
  GeneralError : text;
  InternalSystemMailCollision;
  FailedToGenerateMailId;
  NotFound;
  NotAuthorized;
  DomainNotFound;
  MailNotFound;
};
type MailHeader = record {
  cc : opt vec text;
  to : vec text;
  bcc : opt vec text;
  subject : opt text;
  from : text;
  sender_canister_id : opt text;
  content_type : opt text;
  sender_channel : opt text;
  timestamp : nat64;
  sender_name : opt text;
};
type Newsletter = record { title : text; desciption : text };
type Result = variant { Ok; Err : MailError };
type Result_1 = variant { Ok : record { nat32; nat32 }; Err : MailError };
type Result_2 = variant { Ok : Mail; Err : MailError };
type Result_3 = variant { Ok : vec InboxData; Err : MailError };
type Result_4 = variant { Ok : Newsletter; Err : MailError };
type Result_5 = variant { Ok : vec text; Err : MailError };
type TransformArgs = record { context : vec nat8; response : HttpResponse };
service : () -> {
  create_newsletter : (Newsletter) -> (Result);
  create_user : (text, text) -> (Result);
  delete_mail : (text) -> (Result);
  delete_self : () -> (Result);
  delete_user : (text) -> (Result);
  exchange_key : () -> (text) query;
  export_candid : () -> (text) query;
  get_all_mail_count : () -> (Result_1) query;
  get_domain_name : () -> (text) query;
  get_info : () -> (LedgerInfo) query;
  get_mail : (text) -> (Result_2);
  get_mail_count : () -> (Result_1) query;
  get_mails : (opt nat64) -> (Result_3) query;
  get_newsletter : (text) -> (Result_4) query;
  get_newsletters : () -> (vec record { text; Newsletter }) query;
  get_token_name : () -> (text) query;
  get_users : () -> (Result_5) query;
  public_create_user : (text) -> (Result);
  restore_mail : (text) -> (Result);
  send_mail : (Mail) -> (Result);
  send_newsletter : (text, Mail) -> (Result);
  set_info : (LedgerInfo) -> ();
  submit_mail : (Mail) -> (Result);
  subscribe_to_newsletter : (text, text) -> (Result);
  transform : (TransformArgs) -> (HttpResponse) query;
  unsubscribe_to_newsletter : (text, text) -> (Result);
}
